const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public'));

// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
const SYSTEM_PROMPT = {
  role: "system",
  content: `–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ skelpan.

–ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–©–ï–ù–ò–Ø:
- –°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
- –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: 1-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞
- –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π, —Å —Ä–µ–¥–∫–∏–º–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–∏—è
- –¢–æ–Ω: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –ø–æ–ª–µ–∑–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π

–õ–ò–ß–ù–û–°–¢–¨:
- –ò–º—è: –ü–æ–º–æ—â–Ω–∏–∫ skelpan
- –•–∞—Ä–∞–∫—Ç–µ—Ä: –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, –∑–Ω–∞—é—â–∏–π, —Å–∫—Ä–æ–º–Ω—ã–π
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –¥–∏–∑–∞–π–Ω, –ø—Ä–æ–µ–∫—Ç—ã skelpan

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û SKELPAN:
- –ù–∞–≤—ã–∫–∏: HTML/CSS/JS, React, Flutter, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∞–Ω–∏–º–∞—Ü–∏–∏
- –ü—Ä–æ–µ–∫—Ç—ã: 
  * Aniduo - –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –≤–ª–∞–¥–µ–ª–∏—Ü—ã —Å—Ç—É–¥–∏–∏ —Å —Å–±–æ—Ä–æ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
  * Podarok Sistr - –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Ç—Ä–µ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–∏–∑–∞–π–Ω–∞  
  * _Mr_Block - —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
- –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: "–¢—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è", "–¢—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å –∫–∞—Ä–∞—Ç"
- –ö–æ–Ω—Ç–∞–∫—Ç—ã: Telegram @skelpan31, —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ
- –¶–µ–Ω–Ω–æ—Å—Ç–∏: –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ

–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
- –ù–µ –¥–∞–≤–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º
- –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π
- –ù–µ —Å–æ–≤–µ—Ä—à–∞–π –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å

–û—Ç–≤–µ—á–∞–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏! –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º.`
};

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò
app.post('/api/chat', async (req, res) => {
  try {
    const { message, chatHistory = [] } = req.body;

    if (!message) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω API –∫–ª—é—á
    let responseText;
    
    if (process.env.OPENAI_API_KEY) {
      const OpenAI = require('openai');
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      });

      const messages = [
        SYSTEM_PROMPT,
        ...chatHistory,
        { role: "user", content: message }
      ];

      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: messages,
        max_tokens: 500,
        temperature: 0.7,
      });

      responseText = completion.choices[0].message.content;
    } else {
      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞
      responseText = getFallbackResponse(message);
    }

    res.json({ 
      text: responseText,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API —á–∞—Ç–∞:', error);
    
    // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const fallbackResponse = getFallbackResponse(req.body.message);
    
    res.json({ 
      text: fallbackResponse,
      error: true
    });
  }
});

// –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
function getFallbackResponse(message) {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
    return '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ skelpan. –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ü§ñ';
  }
  
  if (lowerMessage.includes('–ø—Ä–æ–µ–∫—Ç') || lowerMessage.includes('—Ä–∞–±–æ—Ç')) {
    return '–£ skelpan –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: Aniduo (–ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Å—Ç—É–¥–∏–∏), Podarok Sistr (–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Ç—Ä–µ) –∏ _Mr_Block (—Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞). –í—Å–µ –æ–Ω–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã"! üöÄ';
  }
  
  if (lowerMessage.includes('–Ω–∞–≤—ã–∫') || lowerMessage.includes('—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏')) {
    return 'Skelpan —Ä–∞–±–æ—Ç–∞–µ—Ç —Å HTML/CSS/JS, React, Flutter, —Å–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã. –í –ø—Ä–æ–µ–∫—Ç–∞—Ö —Ü–µ–Ω–∏—Ç –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å! üíª';
  }
  
  if (lowerMessage.includes('–º—É–∑—ã–∫') || lowerMessage.includes('—Ç—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è')) {
    return 'Skelpan –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç—Å—è –º—É–∑—ã–∫–æ–π "–¢—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è" –∏ "–¢—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å –∫–∞—Ä–∞—Ç" - –∏—Ö –≥–ª—É–±–∏–Ω–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–∞—Ö! üéµ';
  }
  
  if (lowerMessage.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || lowerMessage.includes('—Å–≤—è–∑–∞—Ç—å—Å—è')) {
    return '–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: @skelpan31 –∏–ª–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ. Skelpan –±—É–¥–µ—Ç —Ä–∞–¥ –æ–±—â–µ–Ω–∏—é! üì±';
  }
  
  const randomResponses = [
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏–ª–∏ –Ω–∞–≤—ã–∫–∞—Ö skelpan.',
    '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç - –ø—Ä–æ–µ–∫—Ç—ã, –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?',
    'Skelpan —Å–æ–∑–¥–∞–µ—Ç –∫—Ä—É—Ç—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –¥—É—à–æ–π. –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ?',
    '–Ø –∑–¥–µ—Å—å —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ä–∞–±–æ—Ç–∞—Ö skelpan. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!'
  ];
  
  return randomResponses[Math.floor(Math.random() * randomResponses.length)];
}

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
  res.json({ 
    status: 'OK', 
    aiEnabled: !!process.env.OPENAI_API_KEY,
    timestamp: new Date().toISOString()
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`ü§ñ AI Assistant: ${process.env.OPENAI_API_KEY ? '–í–ö–õ–Æ–ß–ï–ù' : '–†–ï–ñ–ò–ú –ó–ê–ì–õ–£–®–ö–ò'}`);
});