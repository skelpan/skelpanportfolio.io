// –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
document.addEventListener('DOMContentLoaded', function() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  initNavigation();
  initSmoothScroll();
  initAnimations();
  initContactForm();
  initMobileMenu();
  initAssistantToggle();
  initParticles();
  initRainEffect();
  initScrollEffects();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  window.telegramSender = new TelegramSender('8325858714:AAHsipAsY-Q_5SnR-pftMkhUSFYvq7lmhwE', '1860716243');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  setTimeout(() => {
    checkAssistantStatus();
  }, 2000);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function initNavigation() {
  const header = document.querySelector('.header');
  
  window.addEventListener('scroll', function() {
    if (window.scrollY > 50) {
      header.classList.add('scrolled');
    } else {
      header.classList.remove('scrolled');
    }
  });
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
function initSmoothScroll() {
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      e.preventDefault();
      
      const targetId = this.getAttribute('href');
      if (targetId === '#') return;
      
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        const headerHeight = document.querySelector('.header').offsetHeight;
        const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - headerHeight;
        
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ
        const mobileMenu = document.getElementById('mobile-menu');
        if (mobileMenu.classList.contains('active')) {
          mobileMenu.classList.remove('active');
        }
      }
    });
  });
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initAnimations() {
  const animateOnScroll = function() {
    const elements = document.querySelectorAll('.card, .about-image, .info-item, .skill-item, .stat');
    
    elements.forEach(element => {
      const elementPosition = element.getBoundingClientRect().top;
      const screenPosition = window.innerHeight / 1.3;
      
      if (elementPosition < screenPosition) {
        element.classList.add('visible');
      }
    });
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–∫—Ä–æ–ª–ª–µ
  window.addEventListener('load', animateOnScroll);
  window.addEventListener('scroll', animateOnScroll);
}

// –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function initContactForm() {
  const contactForm = document.getElementById('contact-form');
  
  if (contactForm) {
    contactForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitBtn = this.querySelector('.submit-btn');
      const originalText = submitBtn.innerHTML;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
      const formData = {
        name: document.getElementById('name').value,
        email: document.getElementById('email').value,
        message: document.getElementById('message').value,
        timestamp: new Date().toLocaleString('ru-RU')
      };
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...';
      submitBtn.disabled = true;
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
        const success = await window.telegramSender.sendMessage(
          window.telegramSender.formatContactFormData(formData)
        );
        
        if (success) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
          showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
          
          // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
          contactForm.reset();
        } else {
          throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
      } catch (error) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
      } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
      }
    });
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
  const notificationArea = document.getElementById('notification-area');
  if (!notificationArea) return;
  
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.innerHTML = `
    <div class="notification-content">
      <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
      <span>${message}</span>
    </div>
  `;
  
  notificationArea.appendChild(notification);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  setTimeout(() => {
    notification.classList.add('show');
  }, 10);
  
  // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 5000);
}

// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
function initMobileMenu() {
  const menuToggle = document.getElementById('mobile-menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');
  
  if (menuToggle && mobileMenu) {
    menuToggle.addEventListener('click', function() {
      mobileMenu.classList.toggle('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
    mobileMenu.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', function() {
        mobileMenu.classList.remove('active');
      });
    });
  }
}

// –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
function initAssistantToggle() {
  const assistantToggle = document.getElementById('assistant-toggle');
  const mobileAssistantToggle = document.getElementById('mobile-assistant-toggle');
  const assistant = document.getElementById('assistant');
  
  if (assistantToggle && assistant) {
    assistantToggle.addEventListener('click', function() {
      assistant.classList.toggle('active');
    });
  }
  
  if (mobileAssistantToggle && assistant) {
    mobileAssistantToggle.addEventListener('click', function() {
      assistant.classList.toggle('active');
      document.getElementById('mobile-menu').classList.remove('active');
    });
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  const assistantClose = document.getElementById('assistant-close');
  if (assistantClose) {
    assistantClose.addEventListener('click', function() {
      assistant.classList.remove('active');
    });
  }
}

// –ß–∞—Å—Ç–∏—Ü—ã
function initParticles() {
  const particlesContainer = document.getElementById('particles');
  if (!particlesContainer) return;
  
  const particleCount = 30;
  
  for (let i = 0; i < particleCount; i++) {
    const particle = document.createElement('div');
    particle.classList.add('particle');
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
    const size = Math.random() * 20 + 5;
    const posX = Math.random() * 100;
    const posY = Math.random() * 100;
    const delay = Math.random() * 20;
    
    particle.style.width = `${size}px`;
    particle.style.height = `${size}px`;
    particle.style.left = `${posX}%`;
    particle.style.top = `${posY}%`;
    particle.style.animationDelay = `${delay}s`;
    particle.style.opacity = Math.random() * 0.2 + 0.1;
    
    particlesContainer.appendChild(particle);
  }
}

// –≠—Ñ—Ñ–µ–∫—Ç –¥–æ–∂–¥—è
function initRainEffect() {
  const rainContainer = document.getElementById('rain-container');
  if (!rainContainer) return;
  
  const raindropCount = 100;
  
  for (let i = 0; i < raindropCount; i++) {
    const raindrop = document.createElement('div');
    raindrop.classList.add('drop');
    
    // –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const left = Math.random() * 100;
    const height = Math.random() * 20 + 10;
    const delay = Math.random() * 5;
    const duration = Math.random() * 1 + 0.5;
    
    raindrop.style.left = `${left}%`;
    raindrop.style.height = `${height}px`;
    raindrop.style.animationDelay = `${delay}s`;
    raindrop.style.animationDuration = `${duration}s`;
    
    rainContainer.appendChild(raindrop);
  }
}

// –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initScrollEffects() {
  const visualElements = document.querySelectorAll('.visual-element');
  
  window.addEventListener('scroll', function() {
    const scrollY = window.scrollY;
    
    // –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    visualElements.forEach((element, index) => {
      const speed = 0.05 * (index + 1);
      element.style.transform = `translateY(${scrollY * speed}px)`;
    });
  });
}



// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async function checkAssistantStatus() {
  try {
    const response = await fetch('https://portfolio-server-dobjqrbes-skelpans-projects.vercel.app/api/status');
    const data = await response.json();
    console.log(`ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${data.aiEnabled ? '–ò–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–†–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏'}`);
    return data;
  } catch (error) {
    console.log('ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º');
    return { aiEnabled: false, status: 'offline' };
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
function formatDate(date) {
  const options = { year: 'numeric', month: 'long', day: 'numeric' };
  return new Date(date).toLocaleDateString('ru-RU', options);
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
function handleError(error, context = '') {
  console.error(`–û—à–∏–±–∫–∞ ${context}:`, error);
  showNotification(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ${context}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, 'error');
}