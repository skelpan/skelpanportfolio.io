// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
document.addEventListener('DOMContentLoaded', function() {
  initAssistant();
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const ASSISTANT_CONFIG = {
  apiUrl: 'https://portfolio-server-dobjqrbes-skelpans-projects.vercel.app/api/chat',
  maxHistory: 10,
  fallbackResponses: [
    '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram @skelpan31!',
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å skelpan —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ.',
    '–°–≤—è–∑—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. Skelpan –±—É–¥–µ—Ç —Ä–∞–¥ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ Telegram!'
  ]
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let chatHistory = [];

async function getAIResponse(userMessage) {
  console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò...', ASSISTANT_CONFIG.apiUrl);
  
  try {
    const response = await fetch(ASSISTANT_CONFIG.apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: userMessage
      }),
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('ü§ñ –û—Ç–≤–µ—Ç –ò–ò –ø–æ–ª—É—á–µ–Ω:', data);
    return data.text;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò:', error);
    return getFallbackAIResponse(userMessage);
  }
}

function getFallbackAIResponse(userMessage) {
  console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º');
  const lowerMessage = userMessage.toLowerCase();
  
  if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç')) {
    return '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ skelpan. ü§ñ';
  }
  
  if (lowerMessage.includes('–ø—Ä–æ–µ–∫—Ç')) {
    return '–ü—Ä–æ–µ–∫—Ç—ã: Aniduo, Podarok Sistr, _Mr_Block. –°–º–æ—Ç—Ä–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–∞–±–æ—Ç! üöÄ';
  }
  
  if (lowerMessage.includes('–Ω–∞–≤—ã–∫')) {
    return 'HTML/CSS/JS, React, Flutter, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã! üíª';
  }
  
  return '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –õ—É—á—à–µ —Å–ø—Ä–æ—Å–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏–ª–∏ –Ω–∞–≤—ã–∫–∞—Ö skelpan. üòä';
}

function initAssistant() {
  const assistantBody = document.getElementById('assistant-body');
  const assistantInput = document.getElementById('assistant-input');
  const assistantSend = document.getElementById('assistant-send');
  const assistantClear = document.getElementById('assistant-clear');
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  loadChatHistory();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  assistantSend.addEventListener('click', sendMessage);
  assistantInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });
  
  assistantClear.addEventListener('click', clearChat);
  
  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –∏–Ω–ø—É—Ç–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  document.getElementById('assistant-toggle')?.addEventListener('click', function() {
    setTimeout(() => {
      assistantInput.focus();
    }, 300);
  });
  
  document.getElementById('mobile-assistant-toggle')?.addEventListener('click', function() {
    setTimeout(() => {
      assistantInput.focus();
    }, 300);
  });
}

async function sendMessage() {
  const assistantInput = document.getElementById('assistant-input');
  const assistantBody = document.getElementById('assistant-body');
  const message = assistantInput.value.trim();
  
  if (!message) return;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  addMessage(message, 'user');
  chatHistory.push({ role: 'user', content: message });
  
  // –û—á–∏—â–∞–µ–º –∏–Ω–ø—É—Ç
  assistantInput.value = '';
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
  const typingMsg = addMessage('–ü–µ—á–∞—Ç–∞–µ—Ç...', 'bot', true);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    const responseText = await getAIResponse(message);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    typingMsg.querySelector('.msg-content').textContent = responseText;
    typingMsg.classList.remove('typing');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    chatHistory.push({ role: 'assistant', content: responseText });
    saveChatHistory();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (window.visitorTracker) {
      window.visitorTracker.sendAnonymousMessage(
        `üí¨ –î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:\n–í–æ–ø—Ä–æ—Å: ${message}\n–û—Ç–≤–µ—Ç: ${responseText.substring(0, 100)}...`
      );
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    typingMsg.querySelector('.msg-content').textContent = 
      ASSISTANT_CONFIG.fallbackResponses[0];
    typingMsg.classList.remove('typing');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
    chatHistory.push({ 
      role: 'assistant', 
      content: ASSISTANT_CONFIG.fallbackResponses[0] 
    });
    saveChatHistory();
  }
}

function addMessage(text, sender, isTyping = false) {
  const assistantBody = document.getElementById('assistant-body');
  const messageDiv = document.createElement('div');
  messageDiv.classList.add('msg', sender);
  
  if (isTyping) {
    messageDiv.classList.add('typing');
  }
  
  const contentDiv = document.createElement('div');
  contentDiv.classList.add('msg-content');
  contentDiv.textContent = text;
  
  messageDiv.appendChild(contentDiv);
  assistantBody.appendChild(messageDiv);
  
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  assistantBody.scrollTop = assistantBody.scrollHeight;
  
  return messageDiv;
}

function saveChatHistory() {
  try {
    const chatData = {
      messages: chatHistory,
      timestamp: new Date().toISOString(),
      version: '1.0'
    };
    localStorage.setItem('assistantChat', JSON.stringify(chatData));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
  }
}

function loadChatHistory() {
  try {
    const savedChat = localStorage.getItem('assistantChat');
    const assistantBody = document.getElementById('assistant-body');
    
    if (savedChat) {
      const chatData = JSON.parse(savedChat);
      chatHistory = chatData.messages || [];
      
      // –û—á–∏—â–∞–µ–º —á–∞—Ç (–∫—Ä–æ–º–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
      const welcomeMsg = assistantBody.querySelector('.msg.bot');
      assistantBody.innerHTML = '';
      
      if (welcomeMsg) {
        assistantBody.appendChild(welcomeMsg);
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
      chatHistory.forEach(msg => {
        if (msg.role === 'user' || !welcomeMsg) {
          addMessage(msg.content, msg.role === 'user' ? 'user' : 'bot');
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    chatHistory = [];
  }
}

function clearChat() {
  const assistantBody = document.getElementById('assistant-body');
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const welcomeMsg = assistantBody.querySelector('.msg.bot');
  assistantBody.innerHTML = '';
  
  if (welcomeMsg) {
    assistantBody.appendChild(welcomeMsg);
  }
  
  // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
  chatHistory = [];
  localStorage.removeItem('assistantChat');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  if (typeof window.showNotification === 'function') {
    window.showNotification('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞', 'info');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.AssistantManager = {
  sendMessage,
  clearChat,
  loadChatHistory,
  saveChatHistory
};